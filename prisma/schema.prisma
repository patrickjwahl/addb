generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id       Int     @id @default(autoincrement())
  name     String
  fullName String? @map("full_name")
  city     String?
  district String?
  info     String?
  regionId Int?    @map("region_id")
  stateId  Int?    @map("state_id")
  region   Region? @relation(fields: [regionId], references: [id])
  state    State?  @relation(fields: [stateId], references: [id])
  teams    Team[]

  @@map("schools")
}

model Team {
  id                  Int                  @id @default(autoincrement())
  name                String
  schoolId            Int?                 @map("school_id")
  studentPerformances StudentPerformance[]
  performances        TeamPerformance[]
  school              School?              @relation(fields: [schoolId], references: [id])

  @@map("teams")
}

model Match {
  id                  Int                  @id @default(autoincrement())
  search1             String
  search2             String
  search3             String
  year                Int
  round               Round
  regionId            Int?                 @map("region_id")
  stateId             Int?                 @map("state_id")
  date                DateTime
  site                String?
  hasSq               Boolean              @default(false) @map("has_sq")
  incompleteData      Boolean              @default(false) @map("incomplete_data")
  hasDivisions        Boolean              @default(false) @map("has_divisions")
  access              Int
  events              Category[]
  region              Region?              @relation(fields: [regionId], references: [id])
  state               State?               @relation(fields: [stateId], references: [id])
  studentPerformances StudentPerformance[]
  teamPerformances    TeamPerformance[]

  @@map("matches")
}

model Student {
  id           Int                  @id @default(autoincrement())
  name         String
  performances StudentPerformance[]

  @@map("students")
}

model StudentPerformance {
  id            Int      @id @default(autoincrement())
  studentId     Int?     @map("student_id")
  matchId       Int      @map("match_id")
  teamId        Int      @map("team_id")
  gpa           String
  math          Float?
  music         Float?
  econ          Float?
  science       Float?
  lit           Float?
  art           Float?
  fine          Float?
  socialScience Float?   @map("social_science")
  sq            Float?
  essay         Float?
  speech        Float?
  interview     Float?
  overall       Float?
  objs          Float?
  subs          Float?
  match         Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  student       Student? @relation(fields: [studentId], references: [id])
  team          Team     @relation(fields: [teamId], references: [id])

  @@map("student_performances")
}

model TeamPerformance {
  id       Int     @id @default(autoincrement())
  matchId  Int     @map("match_id")
  teamId   Int     @map("team_id")
  division String?
  number   Int?
  rank     Int
  overall  Float
  objs     Float?
  subs     Float?
  sq       Float?
  match    Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team     Team    @relation(fields: [teamId], references: [id])

  @@map("team_performances")
}

model Region {
  id      Int      @id @default(autoincrement())
  name    String
  stateId Int      @map("state_id")
  matches Match[]
  state   State    @relation(fields: [stateId], references: [id])
  schools School[]

  @@map("regions")
}

model State {
  id      Int      @id @default(autoincrement())
  name    String
  matches Match[]
  regions Region[]
  School  School[]

  @@map("states")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String
  passhash  String
  access    Int
  canEdit   Boolean   @default(false) @map("can_edit")
  edits     Edit[]
  lastLogin DateTime?

  @@map("users")
}

model Edit {
  id       Int      @id @default(autoincrement())
  userId   Int      @map("user_id")
  datetime DateTime @default(now())
  summary  String?
  diff     String?
  user     User     @relation(fields: [userId], references: [id])

  @@map("edits")
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("session")
  @@ignore
}

model Configuration {
  id       Int              @id @default(autoincrement())
  key      ConfigurationKey
  strValue String?          @map("str_value")
  numValue Int?             @map("num_value")

  @@map("configuration")
}

enum ConfigurationKey {
  year
}

enum Round {
  roundone
  regionals
  state
  nationals
}

enum Category {
  math
  music
  fine
  econ
  science
  lit
  art
  socialScience
  sq
  essay
  speech
  interview
}
